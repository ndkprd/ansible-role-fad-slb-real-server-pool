---

# Gather existing entries facts by using HTTP GET Request against the
# FAD SLB Real Server Pool endpoint, and then register the result into the
# 'fad_slb_real_server_pool_get_results' var. Failed when the HTTP return code
# is anything other than 200 or 302.
- name: Gather FAD SLB Real Server Pool facts for create task.
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint.slb_real_server_pool }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: pool_gather_results
  failed_when: "pool_gather_results.status not in [200, 302]"
  tags: [get]

# Will print out the value of the collected facts registered from the
# previous task.
- name: Debug out FAD SLB Real Server Pool gathered facts.
  ansible.builtin.debug:
    msg: "{{ pool_gather_results.json.payload }}"
  tags: [debug]

# This task will check if our desired entries in our vars already exist or not
# in the previously gathered fact. If yes, then that entry will be skipped.
# If not exist, that entry will be created.
- name: Add FAD SLB Real Server Pool entry if not exist.
  vars:
    existing_pools: "{{ pool_gather_results.json.payload | json_query('[].mkey') }}"
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_api_endpoint.slb_real_server_pool }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ pool.name | string }}",
        "direct_route_ip": "{{ pool.direct_route_ip | default('0.0.0.0') | string }}",
        "direct_route_ip6": "{{ pool.direct_route_ip6 | default('::') | string }}",
        "direct_route_mode": "{{ pool.direct_route_mode | default('disable') | string }}",
        "health_check": "{{ pool.health_check | default('enable') | string }}",
        "health_check_list": "{{ pool.health_check_list | default(['LB_HLTHCK_HTTP']) | join(' ') + ' ' | string }}",
        "health_check_relationship": "{{ pool.health_check_relationship | default('AND') | string }}",
        "pool_type": "{{ pool.pool_type | default('ipv4') | string }}",
        "rs_profile": "{{ pool.rs_profile | default('NONE') | string }}",
        "sdn_addr_private": "{{ pool.sdn_addr_private | default('disable') | string }}",
        "type": "{{ pool.type | default('static') | string }}",
      }
  register: pool_create_results
  loop: "{{ fad_slb_real_server_pools }}"
  loop_control:
    loop_var: pool
    label: "{{ pool.name }}"
  when:
    - pool.state | default('present') == "present"
    - pool.name not in existing_pools
  changed_when: "pool_create_results.json.payload == 0"
  failed_when: "pool_create_results.json.payload not in [0, -15]"
  tags: [post]

# Re-gather existing entries facts to prepare for update tasks.
- name: Re-gather FAD SLB Real Server Pool facts for update task.
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint.slb_real_server_pool }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: pool_gather_results_update
  failed_when: "pool_gather_results_update.status not in [200, 302]"
  tags: [get]

# Will print out the value of the re-gathered entries.
- name: Debug out FAD SLB Real Server Pool re-gathered facts.
  ansible.builtin.debug:
    msg: "{{ pool_gather_results_update.json.payload }}"
  tags: [debug]

# For each loop, it will check if there's any entry that needs to be updated. Those entry will be
# updated with the new data if there's a difference between the gathered facts and our desired
# configuration in the vars.
- name: Update FAD SLB Real Server Pool entry if entry exists and needs update.
  vars:
    current_pool_facts: "{{ pool_gather_results_update.json.payload }}"
    query: "[?mkey=='%s'].%s"
  ansible.builtin.uri:
    method: PUT
    url: "{{ fad_api_endpoint.slb_real_server_pool }}&mkey={{ pool.name }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: >
      {
        "mkey": "{{ pool.name | string }}",
        "direct_route_ip": "{{ pool.direct_route_ip | default('0.0.0.0') | string }}",
        "direct_route_ip6": "{{ pool.direct_route_ip6 | default('::') | string }}",
        "direct_route_mode": "{{ pool.direct_route_mode | default('disable') | string }}",
        "health_check": "{{ pool.health_check | default('enable') | string }}",
        "health_check_list": "{{ pool.health_check_list | default(['LB_HLTHCK_HTTP']) | join(' ') + ' ' | string }}",
        "health_check_relationship": "{{ pool.health_check_relationship | default('AND') | string }}",
        "pool_type": "{{ pool.pool_type | default('ipv4') | string }}",
        "rs_profile": "{{ pool.rs_profile | default('NONE') | string }}",
        "sdn_addr_private": "{{ pool.sdn_addr_private | default('disable') | string }}",
        "type": "{{ pool.type | default('static') | string }}",
      }
  register: pool_update_results
  loop: "{{ fad_slb_real_server_pools }}"
  loop_control:
    loop_var: pool
    label: "{{ pool.name }}"
  when: >
    (pool.state | default('present') == 'present') and
    (
      ((current_pool_facts | json_query(query % (pool.name, 'direct_route_ip')) | join) !=
        (pool.direct_route_ip | default('0.0.0.0') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'direct_route_ip6')) | join) !=
        (pool.direct_route_ip6 | default('::') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'direct_route_mode')) | join) !=
        (pool.direct_route_mode |  default('disable') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'health_check')) | join) !=
        (pool.health_check | default('enable') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'health_check_list')) | join) !=
        (pool.health_check_list | default(['LB_HLTHCK_HTTP']) |join(' ') + ' ' | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'health_check_relationship')) | join) !=
        (pool.health_check_relationship |  default('AND') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'pool_type')) | join) !=
        (pool.pool_type | default('ipv4') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'rs_profile')) | join) !=
        (pool.rs_profile | default('NONE') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'sdn_addr_private')) | join) !=
        (pool.sdn_addr_private | default('disable') | string)) or
      ((current_pool_facts | json_query(query % (pool.name, 'type')) | join) !=
        (pool.type | default('static') | string))
    )
  changed_when: "pool_update_results.json.payload == 0"
  failed_when: "pool_update_results.json.payload not in [0, -15]"
  tags: [put]

# Final re-gather and print out for debugging purpose, will be skipped if you skip 'debug' tag.
- name: Debug out FAD SLB Real Server Pool final value after update task.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_api_endpoint.slb_real_server_pool, validate_certs=false, split_lines=false, headers=fad_api_header) | from_json).get('payload') }}
  tags: [debug, get]

# delete task for entries with "state = absent" entries. Will only run if you state
# "delete_mode = true" var somewhere (pereferably in Playbook or with --extra-vars).
# the entries MUST NOT be used by other entries to be able to be deleted.
- name: Delete FAD SLB Real Server Pool entries with "state = absent".
  ansible.builtin.uri:
    method: DELETE
    url: "{{ fad_api_endpoint.slb_real_server_pool }}&mkey={{ pool.name }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: pool_delete_results
  when:
    - delete_mode | default(false)
    - pool.state | default('present') == 'absent'
  changed_when: "pool_delete_results.json.payload == 0"
  failed_when: "pool_delete_results.status not in [200, 302]"
  loop: "{{ fad_slb_real_server_pools }}"
  loop_control:
    loop_var: pool
    label: "{{ pool.name }}"
  tags: [delete]
