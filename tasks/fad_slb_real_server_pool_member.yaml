---

# Gather existing entries facts by using HTTP GET Request against the
# FAD SLB Real Server Pool Member endpoint, and then register the result into the
# 'fad_slb_real_server_pool_member_get_results' var. Failed when the HTTP return code
# is anything other than 200 or 302.
- name: Gather FAD SLB Real Server Pool Member facts for create task.
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint.slb_real_server_pool }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: pool_member_gather_results
  failed_when: "pool_member_gather_results.status not in [200, 302]"
  tags: [get]

# Will print out the value of the collected facts registered from the
# previous task.
- name: Debug out FAD SLB Real Server Pool Member gathered facts.
  ansible.builtin.debug:
    msg: "{{ pool_member_gather_results.json.payload }}"
  tags: [debug]

# This task will check if our desired entries in our vars already exist or not
# in the previously gathered fact. If yes, then that entry will be skipped.
# If not exist, that entry will be created.
- name: Add FAD SLB Real Server Pool Member entry if not exist.
  vars:
    existing_pool_members: "{{ pool_member_gather_results.json.payload }}"
    query: "[?mkey=='%s'].pool_member[].real_server_id"
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_api_endpoint.slb_real_server_pool_member }}&pkey={{ pool.0.name }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: >
      {
        "health_check_inherit": "{{  pool.1.health_check_inherit | default('enable') | string }}",
        "m_health_check": "{{  pool.1.m_health_check | default('disable') | string }}",
        "m_health_check_relationship": "{{  pool.1.m_health_check_relationship | default('AND') | string }}",
        "port": "{{  pool.1.port | default('80') | string }}",
        "weight": "{{  pool.1.weight | default('1') | string }}",
        "connlimit": "{{  pool.1.connlimit | default('0') | string }}",
        "recover": "{{  pool.1.recover | default('0') | string }}",
        "warmup": "{{  pool.1.warmup | default('0') | string }}",
        "warmrate": "{{  pool.1.warmrate | default('100') | string }}",
        "connection-rate-limit": "{{  pool.1.connection_rate_limit | default('0') | string }}",
        "status": "{{  pool.1.status | default('enable') | string }}",
        "ssl": "{{  pool.1.ssl | default('disable') | string }}",
        "rs_profile_inherit": "{{  pool.1.rs_profile_inherit | default('enable') | string }}",
        "backup": "{{  pool.1.backup | default('disable') | string }}",
        "hc_status": "{{  pool.1.hc_status | default('1') | string }}",
        "mysql_group_id": "{{  pool.1.mysql_group_id | default('0') | string }}",
        "mysql_read_only": "{{  pool.1.mysql_read_only | default('disable') | string }}",
        "proxy_protocol": "{{  pool.1.proxy_protocol | default('none') | string }}",
        "mssql_read_only": "{{  pool.1.mssql_read_only | default('disable' ) | string }}",
        "modify_host": "{{  pool.1.modify_host | default('enable') | string }}",
        "host": "{{  pool.1.host | default(pool.0.name) | string }}",
        "m_health_check_list": "{{  pool.1.m_health_check_list | default([]) | join(' ') + ' ' | string }}",
        "cookie": "{{  pool.1.cookie | default(pool.1.real_server) | string }}",
        "real_server_id": "{{  pool.1.real_server | string }}"
      }
  register: pool_member_create_results
  loop: "{{ fad_slb_real_server_pools | subelements('real_server_pool_members') }}"
  loop_control:
    loop_var: pool
    label: "{{  pool.1.real_server }} -> {{  pool.0.name }}"
  when:
    - pool.0.state | default('present') == "present"
    - pool.1.state | default('present') == "present"
    - pool.1.real_server | string not in (existing_pool_members | json_query(query % pool.0.name))
  changed_when: "pool_member_create_results.json.payload == 0"
  failed_when: "pool_member_create_results.json.payload not in [0, -15]"
  tags: [post]

# Re-gather existing entries facts to prepare for update tasks.
- name: Re-gather FAD SLB Real Server Pool Member facts for update task.
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint.slb_real_server_pool }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: pool_member_gather_results_update
  failed_when: "pool_member_gather_results_update.status not in [200, 302]"
  tags: [get]

# For each loop, it will check if there's any entry that needs to be updated. Those entry will be
# updated with the new data if there's a difference between the gathered facts and our desired
# configuration in the vars.
- name: Update FAD SLB Real Server Pool Member entry if entry exists and needs update.
  vars:
    current_pool_member_facts: "{{ pool_member_gather_results_update.json.payload }}"
    query: "[?mkey=='%s'].pool_member | [0] | [?real_server_id=='%s'].%s | [0]"
  ansible.builtin.uri:
    method: PUT
    url:
      "{{ fad_api_endpoint.slb_real_server_pool_member }}&pkey={{ pool.0.name }}&mkey={{ \
        (current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'mkey'))) }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: >
      {
        "mkey": "{{ (current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'mkey'))) }}",
        "health_check_inherit": "{{ pool.1.health_check_inherit | default('enable') | string }}",
        "m_health_check": "{{ pool.1.m_health_check | default('disable') | string }}",
        "m_health_check_relationship": "{{ pool.1.m_health_check_relationship | default('AND') | string }}",
        "port": "{{ pool.1.port | default('80') | string }}",
        "weight": "{{ pool.1.weight | default('1') | string }}",
        "connlimit": "{{ pool.1.connlimit | default('0') | string }}",
        "recover": "{{ pool.1.recover | default('0') | string }}",
        "warmup": "{{ pool.1.warmup | default('0') | string }}",
        "warmrate": "{{ pool.1.warmrate | default('100') | string }}",
        "connection-rate-limit": "{{ pool.1.connection_rate_limit | default('0') | string }}",
        "status": "{{ pool.1.status | default('enable') | string }}",
        "ssl": "{{ pool.1.ssl | default('disable') | string }}",
        "rs_profile_inherit": "{{ pool.1.rs_profile_inherit | default('enable') | string }}",
        "backup": "{{ pool.1.backup | default('disable') | string }}",
        "hc_status": "{{ pool.1.hc_status | default('1') | string }}",
        "mysql_group_id": "{{ pool.1.mysql_group_id | default('0') | string }}",
        "mysql_read_only": "{{ pool.1.mysql_read_only | default('disable') | string }}",
        "proxy_protocol": "{{ pool.1.proxy_protocol | default('none') | string }}",
        "mssql_read_only": "{{ pool.1.mssql_read_only | default('disable' ) | string }}",
        "modify_host": "{{ pool.1.modify_host | default('enable') | string }}",
        "host": "{{ pool.0.name | default('host') | string }}",
        "m_health_check_list": "{{ pool.1.m_health_check_list| default([]) | join(' ') + ' ' | string }}",
        "cookie": "{{ pool.1.real_server | default('') | string }}",
        "real_server_id": "{{ pool.1.real_server | string }}"
      }
  register: pool_member_update_results
  loop: "{{ fad_slb_real_server_pools | subelements('real_server_pool_members') }}"
  loop_control:
    loop_var: pool
    label: "{{ pool.1.real_server }} -> {{ pool.0.name }}"
  changed_when: "pool_member_update_results.json.payload == 0"
  failed_when: "pool_member_update_results.json.payload not in [0, -15]"
  when: >
    pool.0.state | default('present') == "present" and
    pool.1.state | default('present') == "present" and
    (
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'health_check_inherit'))) !=
        (pool.1.health_check_inherit | default('enable') | string)) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'm_health_check'))) !=
        pool.1.m_health_check | default('disable') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'm_health_check_relationship'))) !=
        pool.1.m_health_check_relationship | default('AND') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'port'))) !=
        pool.1.port | default('80') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'weight'))) !=
        pool.1.weight | default('1') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'connlimit'))) !=
        pool.1.connlimit | default('0') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'recover'))) !=
        pool.1.recover | default('0') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'warmup'))) !=
        pool.1.warmup | default('0') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'warmrate'))) !=
        pool.1.warmrate | default('100') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'status'))) !=
        pool.1.status | default('enable') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'ssl'))) !=
        pool.1.ssl | default('disable') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'rs_profile_inherit'))) !=
        pool.1.rs_profile_inherit | default('enable') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'backup'))) !=
        pool.1.backup | default('disable') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'hc_status'))) !=
        pool.1.hc_status | default('1') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'mysql_group_id'))) !=
        pool.1.mysql_group_id | default('0') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'mysql_read_only'))) !=
        pool.1.mysql_read_only | default('disable') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'proxy_protocol'))) !=
        pool.1.proxy_protocol | default('none') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'mssql_read_only'))) !=
        pool.1.mssql_read_only | default('disable' ) | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'modify_host'))) !=
        pool.1.modify_host | default('enable') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'host'))) !=
        pool.0.name | default('host') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'm_health_check_list'))) !=
        pool.1.m_health_check_list | default([]) | join(' ') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'cookie'))) !=
        pool.1.real_server | default('') | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'real_server_id'))) !=
        pool.1.real_server | string) or
      ((current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, '\"connection-rate-limit\"'))) !=
        pool.1.connection_rate_limit | default('0') | string)
    )
  tags: [put]

# Final re-gather and print out for debugging purpose, will be skipped if you skip 'debug' tag.
- name: Debug out FAD SLB Real Server Pool Member final value after update task.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_api_endpoint.slb_real_server_pool, validate_certs=false, split_lines=false,
      headers=fad_api_header) | from_json).get('payload') }}
  tags: [debug, get]

# delete task for entries with "state = absent" entries. Will only run if you state
# "delete_mode = true" var somewhere (pereferably in Playbook or with --extra-vars).
# the entries MUST NOT be used by other entries to be able to be deleted.
- name: Delete FAD SLB Real Server Pool Member entries with "state = absent".
  vars:
    current_pool_member_facts: "{{ pool_member_gather_results_update.json.payload }}"
    query: "[?mkey=='%s'].pool_member | [0] | [?real_server_id=='%s'].%s | [0]"
  ansible.builtin.uri:
    method: DELETE
    url:
      "{{ fad_api_endpoint.slb_real_server_pool_member }}&pkey={{ pool.0.name }}&mkey={{ \
        (current_pool_member_facts | json_query(query % (pool.0.name, pool.1.real_server, 'mkey'))) }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: pool_member_delete_results
  loop: "{{ fad_slb_real_server_pools | subelements('real_server_pool_members') }}"
  loop_control:
    loop_var: pool
    label: "{{ pool.1.real_server }} -> {{ pool.0.name }}"
  changed_when: "pool_member_delete_results.json.payload == 0"
  failed_when: "pool_member_delete_results.status not in [200, 302]"
  when: >
    pool.0.state | default('present') == "present" and
    pool.1.state | default('present') == "absent"
  tags: [delete]
